#!/usr/bin/env perl

# This script initialises and runs the canto server
#
# The first time the script is run, the user will be asked to initialise
# the application with the --initialise flag.
#
# Once initialised, the script needs no arguments as it will read it's
# configuration from the canto_deploy.yaml file.

use strict;
use warnings;
use Carp;
use File::Basename;
use Getopt::Long qw(:config pass_through);

# this works around a bug in Cache that gives the error:
# "Unknown warnings category 'Cache'"
package Cache;
use warnings::register;

package main;

$SIG{INT} = sub { die "Caught SIGINT - exiting\n" };

BEGIN {
  my $script_name = basename $0;

  if (-f $script_name && -d "../etc") {
    # we're in the scripts directory - go up
    chdir "..";
  }
};

use lib qw(lib);

use Canto::Config;
use Canto::Meta::Util;

$ENV{CANTO_CONFIG_LOCAL_SUFFIX} ||= 'deploy';

my $lc_app_name = lc Canto::Config::get_application_name();

my $local_suffix = $ENV{CANTO_CONFIG_LOCAL_SUFFIX};

$ENV{PLACK_ENV} //= $ENV{CANTO_CONFIG_LOCAL_SUFFIX};

if ($local_suffix eq 'deploy') {
  my $init_dir = undef;

  GetOptions ("initialise=s" => \$init_dir);

  if ($init_dir) {
    my $config = Canto::Config->new(["${lc_app_name}.yaml"]);
    Canto::Meta::Util::initialise_app($config, $init_dir);
    print "Initialisation successful, now run $0 without arguments\n";
    exit(0);
  } else {
    if (!Canto::Meta::Util::app_initialised($lc_app_name)) {
      die "$0: Error - application not initialised

Run:
  $0 --initialise <some_directory>
to initialise

<some_directory> must be empty\n";
    }
  }
} else {
  # we're testing
}

print "Canto loading ...\r";

require Plack::Runner;
require Plack::Middleware::ReverseProxy;
require Plack::Middleware::Debug;
require Plack::Middleware::Expires;
require Plack::Middleware::Static;
require Plack::Middleware::InteractiveDebugger;

require Canto;

my $app = Canto->psgi_app;

$app = Plack::Middleware::ReverseProxy->wrap($app);

$app = Plack::Middleware::Static->wrap($app,
                                       path => sub {
                                         s!^/+static/v\d+[\d\w\-]+/!! },
                                       root => 'root/static');
$app = Plack::Middleware::Static->wrap($app,
                                       path => sub {
                                         s!^/+dist/v\d+[\d\w\-]+/!! },
                                       root => 'dist');

if (defined $ENV{PLACK_DEBUG}) {
  if ($ENV{PLACK_DEBUG} > 1) {
    $app = Plack::Middleware::Debug->wrap($app);
    $app = Plack::Middleware::InteractiveDebugger->wrap($app);
  }
} else {
  # cache the static files
  $app = Plack::Middleware::Conditional->wrap(
    $app,
    condition  => sub {
      $_[0]->{PATH_INFO} =~ m:^/static/:;
    },
    builder => sub {
      my $type_re = qr!^image/|^application/javascript$|^text/css|^text/html!;
      Plack::Middleware::Expires->wrap($app,
                                       content_type => $type_re,
                                       expires => 'access plus 999 days');
    },
  );
}

my $runner = Plack::Runner->new;

my $port = undef;

for (my $i = 0; $i < @ARGV; $i++) {
  if ($ARGV[$i] eq '--port' || $ARGV[$i] eq '-p') {
    $port = $ARGV[$i + 1];
    last;
  }
}

if (!defined $port && !defined $ENV{SERVER_STARTER_PORT}) {
  $port = 5000;
  push @ARGV, '--port', $port;
}

$runner->parse_options(@ARGV);

if (!defined $ENV{SERVER_STARTER_PORT}) {
  print "\rStarting Canto server on port $port\n";
}
$runner->run($app);
